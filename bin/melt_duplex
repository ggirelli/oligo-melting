#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# ------------------------------------------------------------------------------
# 
# Author: Gabriele Girelli
# Email: gigi.ga90@gmail.com
# Date: 20170711
# Project: oligo characterization
# Description:  calculate melting temperature of a provide NA duplex
# 
# ------------------------------------------------------------------------------



import argparse
from Bio.SeqIO.FastaIO import SimpleFastaParser
from ggc.args import check_threads
from joblib import Parallel, delayed
import oligo_melting as om
import os
import pandas as pd
import re
import sys
from tqdm import tqdm

# Add script description
parser = argparse.ArgumentParser(
    description = '''
Calculate melting temperature of a DNA duplex at provided [oligo],
[Na+], [Mg2+]. Either provide an oligo sequence or a FASTA file.
References:
 [1] Freier et al, PNAS(83), 1986;
 [2] Sugimoto et al, Biochemistry(34), 1995.
 [3] Allawi & Santalucia, Biochemistry(36), 1997;
 [4] SantaLucia, PNAS(95), 1998;
 [5] Owczarzy et al, Biochemistry(43), 2004;
 [6] Owczarzy et al, Biochemistry(47), 2008;
 [7] McConaughy et al, Biochemistry(8), 1969;
 [8] Wright et al, Appl. env. microbiol.(80), 2014.
''', formatter_class = argparse.RawDescriptionHelpFormatter)

# Add mandatory arguments
parser.add_argument('input', type = str, help = '''DNA duplex sequence
    (one strand only) or path to a FASTA file.''')

# Add arguments with default value
parser.add_argument('-O', metavar = "output", type = str,
    help = '''Path to output file.''')
parser.add_argument('-T', type = str,
    help = '''Duplex type. Possible values: DNA:DNA (based on ref.3, default),
    RNA:RNA (based on ref.1), DNA:RNA (based on ref.2., given DNA sequence)
    or RNA:DNA (based on ref.2, given RNA sequence). The first nucleic acid type
    indicates the provided sequence.''',
    choices = om.NN_TABLES.keys(),
    default = om.Melter.DEFAULT_NN)
parser.add_argument('-o', metavar = "oligo_conc",
    type = float,
    help = '''Oligonucleotide concentration [M].
    Default: %.2E M''' % om.Melter.DEFAULT_OLIGO,
    default = om.Melter.DEFAULT_OLIGO)
parser.add_argument('-n', metavar = "na_conc",
    type = float,
    help = '''Na+ concentration [M].
    Default: %.2E M''' % om.MeltingIonCorrector.DEFAULT_MONOVALENT,
    default = om.MeltingIonCorrector.DEFAULT_MONOVALENT)
parser.add_argument('-m', metavar = "mg_conc",
    type = float,
    help = '''Mg2+ concentration [M]. Note: Mg2+ correction overwrites Na+
    correction. Default: %.2E M''' % om.MeltingIonCorrector.DEFAULT_DIVALENT,
    default = om.MeltingIonCorrector.DEFAULT_DIVALENT)
parser.add_argument('-f', type = float,
    metavar = 'fa_conc', help = '''Formamide concentration in perc.v,v.
    Default: %.2f''' % om.MeltingDenaturantCorrector.DEFAULT_CONC,
    default = om.MeltingDenaturantCorrector.DEFAULT_CONC)
parser.add_argument('--f-mode', type = str,
    metavar = 'fa_mode', help = '''Mode of formamide correction. "mcconaughy"
    for classical -0.72%%FA correction from ref. 7, "wright" for single reaction
    model correction from ref.8 (default).''',
    choices = om.MeltingDenaturantCorrector.MODES,
    default = om.MeltingDenaturantCorrector.DEFAULT_MODE)
parser.add_argument('--f-mvalue-1', type = str, metavar = 'm1',
    help = '''Specify the formamide m-value to be used with the wright
    correction model. If the second m-value is 0, this is used as a single value
    "x", otherwise the two values are used as "xL+y" where L is the probe
    length. Default: %s''' % om.MeltingDenaturantCorrector.DEFAULT_M1,
    default = om.MeltingDenaturantCorrector.DEFAULT_M1)
parser.add_argument('--f-mvalue-2', type = str, metavar = 'm2',
    help = '''Specify the formamide m-value to be used with the wright
    correction model. This is used as y in "xL+y", where L is the probe length.
    Default: %s''' % om.MeltingDenaturantCorrector.DEFAULT_M2,
    default = om.MeltingDenaturantCorrector.DEFAULT_M2)
parser.add_argument('-d', '--delim', type = str, metavar = "sep",
    help = '''Delimiter between key and value in FASTA header description.
    Default: "="''', default = "=")
parser.add_argument('-t', type = int, metavar = "threads",
    help = '''Number of threads for parallelization. Default: 1''',
    default = 1)
parser.add_argument('--out-curve', type = str, metavar = "output",
    help = '''Provide path to file where melting curve points should be
    stored.''')
parser.add_argument('--curve-range', type = float, metavar = "range",
    help = '''Range size to scan around the melting temperature, to build the
    melting curve. Default: %f''' % om.Melter.DEFAULT_RANGE,
    default = om.Melter.DEFAULT_RANGE)
parser.add_argument('--curve-step', type = float, metavar = "range",
    help = '''Temperature step used to scan the specified range, when building
    the melting curve. Default: %f''' % om.Melter.DEFAULT_STEP,
    default = om.Melter.DEFAULT_STEP)

# Add flags
parser.add_argument('-C', '--celsius',
    dest = 'celsius', action = 'store_const',
    const = True, default = False,
    help = 'Output temperature in Celsius degrees. Default: Kelvin')
parser.add_argument('-F', '--fasta-like',
    dest = 'fasta_like', action = 'store_const',
    const = True, default = False,
    help = 'Output in FASTA format.')

# Version flag
version = "3.0.0"
parser.add_argument('--version', action = 'version',
    version = '%s v%s' % (sys.argv[0], version,))

# Parse arguments
args = parser.parse_args()

def parse_output(x, fasta_like = False):
    if fasta_like:
        return ">%s tm%s%.2f\n%s" % (x[0], args.delim, x[4], x[-1])
    else:
        return "%s\t%.3f\t%.3f\t%.3f\t%.2f\t%s" % x

melter = om.Melter()
assert args.o >= 0, "concentration cannot be negative."
melter.oligo = args.o
assert args.n >= 0, "concentration cannot be negative."
melter.ions.monovalent = args.n
assert args.m >= 0, "concentration cannot be negative."
melter.ions.divalent = args.m
assert args.f >= 0, "concentration cannot be negative."
melter.denaturant.conc = args.f
melter.denaturant.mode = args.f_mode
melter.denaturant.m1 = args.f_mvalue_1
melter.denaturant.m2 = args.f_mvalue_2
melter.load_nn_table(args.T)
if args.celsius:
    melter.degrees = melter.DEGREES_TYPE[0]
assert args.curve_range > 0, "temperature range must be positive."
assert args.curve_step > 0, "temperature step must be positive."
args.t = check_threads(args.t)

if not args.fasta_like:
    print("oligo_name\tdG\tdH\tdS\tTm\tSeq")

OH = None
if not type(None) == type(args.O):
    OH = open(args.O, "w+")
    def pout(x, f, OH):
        x = parse_output(x, f)
        print(x)
        OH.write("%s\n" % x)
else:
    def pout(x, f, OH):
        x = parse_output(x, f)
        print(x)

if type(None) != type(args.out_curve):
    if os.path.isfile(args.out_curve):
        os.remove(args.out_curve)
    COH = open(args.out_curve, "a+")

if os.path.isfile(args.input):
    IH = open(args.input, "r")
    if 1 == args.t:
        for record in SimpleFastaParser(IH):
            seq = om.Sequence(record[1], args.T.split(":")[0], record[0])
            data = melter.calculate(seq)
            pout(data, args.fasta_like, OH)
            if type(None) != type(args.out_curve):
                curve = pd.DataFrame(melter.melting_curve(seq))
                curve['name'] = data[0]
                curve.to_csv(COH, "\t", index = None, header = None)
    else:
        if type(None) != type(args.out_curve):
            def calc_melting(record):
                seq = om.Sequence(record[1], args.T.split(":")[0], record[0])
                curve = pd.DataFrame(melter.melting_curve(seq))
                curve['name'] = record[0]
                return {"melt" : melter.calculate(seq), "curve" : curve}
        else:
            def calc_melting(record):
                seq = om.Sequence(record[1], args.T.split(":")[0], record[0])
                return {"melt" : melter.calculate(seq)}

        data = Parallel(n_jobs = args.t, verbose = 11)(
            delayed(calc_melting)(record)
            for record in SimpleFastaParser(IH))

        if type(None) != type(args.out_curve):
            for record in tqdm(data):
                pout(record["melt"], args.fasta_like, OH)
        else:
            for record in tqdm(data):
                pout(record["melt"], args.fasta_like, OH)
                record["curve"].to_csv(COH, "\t",
                    index = False, header = False)
    IH.close()
else:
    data = melter.calculate(args.input)
    pout(data, args.fasta_like, OH)
    if type(None) != type(args.out_curve):
        curve = pd.DataFrame(melter.melting_curve(args.input))
        curve['name'] = data[0]
        curve.to_csv(COH, "\t", index = None, header = None)

if not type(None) == type(args.O):
    OH.close()
if type(None) != type(args.out_curve):
    COH.close()

# END ==========================================================================

################################################################################
