#!/usr/bin/env python3

# ------------------------------------------------------------------------------
#
# Author: Gabriele Girelli
# Email: gigi.ga90@gmail.com
# Date: 20171026
# Project: oligo characterization
# Description: correct melting temperature of secondary structures and produce
#              melting curves.
#
# ------------------------------------------------------------------------------


import argparse
from ggc.args import check_threads
import oligo_melting as om
import os
import pandas as pd
import re
import sys

parser = argparse.ArgumentParser(
    description="""
Corrects melting temperature of a secondary structure, predicted with
OligoArrayAux, based on denaturant (formamide) concentration. References:
 [1] McConaughy et al, Biochemistry(8), 1969;
 [2] Wright et al, Appl. env. microbiol.(80), 2014.
""",
    formatter_class=argparse.RawDescriptionHelpFormatter,
)

parser.add_argument(
    "input",
    type=str,
    help="""
    Tab-separated file with dG, dH, and Tm columns (e.g., generated by a
    software like OligoArrayAux). Tm is expected to be in Celsius degree, while
    dH and dG in kcal / mol.""",
)

parser.add_argument(
    "-T",
    type=str,
    help="""Duplex type. Possible values: DNA:DNA (based on ref.3, default),
    RNA:RNA (based on ref.1), DNA:RNA (based on ref.2., given DNA sequence)
    or RNA:DNA (based on ref.2, given RNA sequence). The first nucleic acid type
    indicates the provided sequence.""",
    choices=om.NN_TABLES.keys(),
    default=om.Melter.DEFAULT_NN,
)
parser.add_argument(
    "-f",
    type=float,
    metavar="fa_conc",
    help="""Formamide concentration in %%(v,v).""",
    default=0,
)
parser.add_argument(
    "-t",
    type=int,
    metavar="threads",
    help="""Number of threads for parallelization. Default: 1""",
    default=1,
)
parser.add_argument(
    "--out-curve",
    type=str,
    metavar="output",
    help="""Provide path to file where melting curve points should be
    stored.""",
)
parser.add_argument(
    "--curve-range",
    type=float,
    metavar="range",
    help="""Range size to scan around the melting temperature, to build the
    melting curve. Default: %f"""
    % om.Melter.DEFAULT_RANGE,
    default=om.Melter.DEFAULT_RANGE,
)
parser.add_argument(
    "--curve-step",
    type=float,
    metavar="range",
    help="""Temperature step used to scan the specified range, when building
    the melting curve. Default: %f"""
    % om.Melter.DEFAULT_STEP,
    default=om.Melter.DEFAULT_STEP,
)

parser.add_argument(
    "-C",
    "--celsius",
    dest="celsius",
    action="store_const",
    const=True,
    default=False,
    help="Output temperature in Celsius degrees. Default: Kelvin",
)

version = "3.0.0"
parser.add_argument(
    "--version",
    action="version",
    version="%s v%s"
    % (
        sys.argv[0],
        version,
    ),
)

args = parser.parse_args()

assert os.path.exists(args.input), "file not found: %s" % args.input

t = pd.read_csv(args.input, "\t")
print(t)


melter = om.Melter()
assert args.f >= 0, "concentration cannot be negative."
melter.denaturant.conc = args.f
melter.load_nn_table(args.T)
if args.celsius:
    melter.degrees = melter.DEGREES_TYPE[0]
assert args.curve_range > 0, "temperature range must be positive."
assert args.curve_step > 0, "temperature step must be positive."
args.t = check_threads(args.t)

melter.denaturant.mode = melter.denaturant.MODES.MCCONAUGHY


# first_line = True
# with open(fin_path) as fin:
#     for row in fin:

#         # Parse first line -------------------------------------------------
#         if first_line:
#             print(row.strip())
#             if not "Tm" in row.strip().split("\t"):
#                 sys.exit("!!!ERROR! Missing 'Tm' column.")
#             else:
#                 Tm_col = row.strip().split("\t").index("Tm")
#                 dG_col = row.strip().split("\t").index("dG")
#                 dH_col = row.strip().split("\t").index("dH")
#                 dS_col = row.strip().split("\t").index("dS")
#             first_line = False
#             continue

#         # Parse other lines ------------------------------------------------
#         row = row.strip().split("\t")
#         oldTm = float(row[Tm_col])
#         dG = float(row[dG_col])
#         dH = float(row[dH_col])
#         dS = float(row[dS_col]) / 1000

#         # Correct Tm per formamide
#         row[Tm_col] = OligoMelt.SecStr.adj_fa(oldTm + 273.15, fa_conc)
#         if celsius:
#             row[Tm_col] = row[Tm_col] - 273.15
#         row[Tm_col] = "%.1f" % row[Tm_col]

#         # Produce melting curves -------------------------------------------

#         if do_curve:
#             fout = open(curve_outpath, 'a+')
#             tab = OligoMelt.SecStr.melt_curve(dH, dS, oldTm + 273.15,
#                 fa_conc, curve_range, curve_step)
#             for (t, k) in tab:
#                 if celsius:
#                     fout.write("%s\t%f\t%f\n" % (row[0], t - 273.15, k))
#                 else:
#                     fout.write("%s\t%f\t%f\n" % (row[0], t, k))
#             fout.close()

#         # Output -----------------------------------------------------------
#         print("\t".join(row))

# END ==========================================================================

################################################################################
