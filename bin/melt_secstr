#!/usr/bin/env python3

# ------------------------------------------------------------------------------
#
# Author: Gabriele Girelli
# Email: gigi.ga90@gmail.com
# Date: 20171026
# Project: oligo characterization
# Description: correct melting temperature of secondary structures and produce
#              melting curves.
#
# ------------------------------------------------------------------------------


# DEPENDENCIES =================================================================

import argparse
import os
import sys

import oligo_melting as OligoMelt  # type: ignore
from oligo_melting.const import __version__  # type: ignore

# PARAMETERS ===================================================================

# Add script description
parser = argparse.ArgumentParser(
    description="""
Corrects melting temperature of a secondary structure, predicted with
OligoArrayAux, based on denaturant (formamide) concentration. References:
 [1] McConaughy et al, Biochemistry(8), 1969;
 [2] Wright et al, Appl. env. microbiol.(80), 2014.
""",
    formatter_class=argparse.RawDescriptionHelpFormatter,
)

# Add mandatory arguments
parser.add_argument(
    "FILE",
    type=str,
    help="""
    Tab-separated file with dG, dH, and Tm columns (e.g., generated by a
    software like OligoArrayAux). Tm is expected to be in Celsius degree, while
    dH and dG in kcal / mol.""",
)

# Add arguments with default value
parser.add_argument(
    "-f",
    type=float,
    metavar="fa_conc",
    help="""Formamide concentration in %%(v,v).""",
    default=0,
)
parser.add_argument(
    "--out-curve",
    type=str,
    metavar="output",
    help="""Provide path to file where melting curve points should be
    stored.""",
)
parser.add_argument(
    "--curve-range",
    type=float,
    metavar="range",
    help="""Range size to scan around the melting temperature, to build the
    melting curve. Default: %f"""
    % om.Melter.DEFAULT_RANGE,
    default=om.Melter.DEFAULT_RANGE,
)
parser.add_argument(
    "--curve-step",
    type=float,
    metavar="range",
    help="""Temperature step used to scan the specified range, when building
    the melting curve. Default: %f"""
    % om.Melter.DEFAULT_STEP,
    default=om.Melter.DEFAULT_STEP,
)

# Add flags
parser.add_argument(
    "-C",
    "--celsius",
    dest="celsius",
    action="store_const",
    const=True,
    default=False,
    help="Output temperature in Celsius degrees. Default: Kelvin",
)

# Version flag
version = "3.0.0"
parser.add_argument(
    "--version",
    action="version",
    version="%s v%s"
    % (
        sys.argv[0],
        version,
    ),
)

# Parse arguments
args = parser.parse_args()

# Assign to in-script variables ------------------------------------------------

fin_path = args.FILE
celsius = args.celsius
fa_conc = args.faconc

# FUNCTIONS ====================================================================

# RUN ==========================================================================

# if not os.path.exists(fin_path):
#     sys.exit("!!!ERROR! File not found: %s" % (fin_path,))
# else:
#     # Read file
#     first_line = True
#     with open(fin_path) as fin:
#         for row in fin:

#             # Parse first line -------------------------------------------------
#             if first_line:
#                 print(row.strip())
#                 if not "Tm" in row.strip().split("\t"):
#                     sys.exit("!!!ERROR! Missing 'Tm' column.")
#                 else:
#                     Tm_col = row.strip().split("\t").index("Tm")
#                     dG_col = row.strip().split("\t").index("dG")
#                     dH_col = row.strip().split("\t").index("dH")
#                     dS_col = row.strip().split("\t").index("dS")
#                 first_line = False
#                 continue

#             # Parse other lines ------------------------------------------------
#             row = row.strip().split("\t")
#             oldTm = float(row[Tm_col])
#             dG = float(row[dG_col])
#             dH = float(row[dH_col])
#             dS = float(row[dS_col]) / 1000

#             # Correct Tm per formamide
#             row[Tm_col] = OligoMelt.SecStr.adj_fa(oldTm + 273.15, fa_conc)
#             if celsius:
#                 row[Tm_col] = row[Tm_col] - 273.15
#             row[Tm_col] = "%.1f" % row[Tm_col]

#             # Produce melting curves -------------------------------------------

#             if do_curve:
#                 fout = open(curve_outpath, 'a+')
#                 tab = OligoMelt.SecStr.melt_curve(dH, dS, oldTm + 273.15,
#                     fa_conc, curve_range, curve_step)
#                 for (t, k) in tab:
#                     if celsius:
#                         fout.write("%s\t%f\t%f\n" % (row[0], t - 273.15, k))
#                     else:
#                         fout.write("%s\t%f\t%f\n" % (row[0], t, k))
#                 fout.close()

#             # Output -----------------------------------------------------------
#             print("\t".join(row))

# END ==========================================================================

################################################################################
