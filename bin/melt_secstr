#!/usr/bin/env python3

# ------------------------------------------------------------------------------
# 
# Author: Gabriele Girelli
# Email: gigi.ga90@gmail.com
# Date: 20171026
# Project: oligo characterization
# Description: correct melting temperature of secondary structures and produce
#              melting curves.
# 
# ------------------------------------------------------------------------------



import argparse
from ggc.args import check_threads
from joblib import delayed, Parallel
import oligo_melting as om
import os
import pandas as pd
import re
import sys
from tqdm import tqdm

parser = argparse.ArgumentParser(
    description = '''
Corrects melting temperature of a secondary structure, predicted with
OligoArrayAux, based on denaturant (formamide) concentration. References:
 [1] McConaughy et al, Biochemistry(8), 1969;
 [2] Wright et al, Appl. env. microbiol.(80), 2014.
''', formatter_class = argparse.RawDescriptionHelpFormatter)

parser.add_argument('input', type = str, help = '''
    Tab-separated file with dG, dH, and Tm columns (e.g., generated by a
    software like OligoArrayAux). Tm is expected to be in Celsius degree, while
    dH and dG in kcal / mol.''')

parser.add_argument('-O', metavar = "output", type = str,
    help = '''Path to output file.''')
parser.add_argument('-T', type = str,
    help = '''Duplex type. Possible values: DNA:DNA (based on ref.3, default),
    RNA:RNA (based on ref.1), DNA:RNA (based on ref.2., given DNA sequence)
    or RNA:DNA (based on ref.2, given RNA sequence). The first nucleic acid type
    indicates the provided sequence.''',
    choices = om.NN_TABLES.keys(),
    default = om.Melter.DEFAULT_NN)
parser.add_argument('-f', type = float,
    metavar = 'fa_conc', help = '''Formamide concentration in %%(v,v).''',
    default = 0)
parser.add_argument('-t', type = int, metavar = "threads",
    help = '''Number of threads for parallelization. Default: 1''',
    default = 1)
parser.add_argument('--out-curve', type = str, metavar = "output",
    help = '''Provide path to file where melting curve points should be
    stored.''')
parser.add_argument('--curve-range', type = float, metavar = "range",
    help = '''Range size to scan around the melting temperature, to build the
    melting curve. Default: %f''' % om.Melter.DEFAULT_RANGE,
    default = om.Melter.DEFAULT_RANGE)
parser.add_argument('--curve-step', type = float, metavar = "range",
    help = '''Temperature step used to scan the specified range, when building
    the melting curve. Default: %f''' % om.Melter.DEFAULT_STEP,
    default = om.Melter.DEFAULT_STEP)

version = "3.0.0"
parser.add_argument('--version', action = 'version',
    version = '%s v%s' % (sys.argv[0], version,))

args = parser.parse_args()

assert os.path.exists(args.input), "file not found: %s" % args.input

melter = om.Melter()
assert args.f >= 0, "concentration cannot be negative."
melter.denaturant.conc = args.f
melter.load_nn_table(args.T)
assert args.curve_range > 0, "temperature range must be positive."
melter.curve_range = args.curve_range
assert args.curve_step > 0, "temperature step must be positive."
melter.curve_step = args.curve_step
args.t = check_threads(args.t)

melter.denaturant.mode = melter.denaturant.MODES.MCCONAUGHY

t = pd.read_csv(args.input, "\t")

colList = ["Tm"]
assert all([x in t.columns for x in colList])

if args.t == 1:
    for ri in tqdm(t.index):
        t.loc[ri,'Tm'] = melter.denaturant.mcconaughy_correction(t.loc[ri,'Tm'])
else:
    def melt_correct(row):
        row['Tm'] = melter.denaturant.mcconaughy_correction(row['Tm'])
        return(row)
    data = Parallel(n_jobs = args.t, verbose = 11)(
            delayed(melt_correct)(row[1])
            for row in t.iterrows())
    t = pd.concat(data, axis = 1).transpose()

if not type(None) == type(args.out_curve):
    curveData = []
    for ri in tqdm(t.index):
        tm = t.loc[ri, 'Tm']
        h = t.loc[ri, 'dH'] if 'dH' in t.columns else None
        s = t.loc[ri, 'dS'] if 'dS' in t.columns else None
        name = t.loc[ri, 'name'] if 'name' in t.columns else "mer_%d" % ri
        seq = om.Sequence("", args.T.split(":")[0], name)
        curve = pd.DataFrame(melter.melting_curve(seq, h, s, tm,
            correctIons = False))
        curve['name'] = name
        curveData.append(curve)
    curveData = pd.concat(curveData)
    curveData.columns  = ["t", "fraction", "name"]
    curveData.to_csv(args.out_curve, "\t", index = False)

print("\t".join(t.columns))
for row in t.iterrows():
    print("\t".join(row[1].astype("str").tolist()))

if type(None) != type(args.O):
    with open(args.O, "w+") as OH:
        t.to_csv(OH, "\t", index = False, float_format = "%.3f")


# END ==========================================================================

################################################################################
