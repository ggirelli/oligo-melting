name: Python package

on:
  push:
    branches: 
      - main
      - dev
  pull_request:
    branches: 
      - main

jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
    # Checkout repo and setup python
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
    # load pip cache if cache exists
    - uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip
        restore-keys: ${{ runner.os }}-pip
    # install linters
    - name: Setup linters
      run: python -m pip install black flake8 mypy
    # run linters
    - name: Lint
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=5 --max-line-length=88 --ignore=E203 --statistics
        black . --check
        mypy .
  build-and-test:
    needs: linting
    strategy:
      fail-fast: true
      matrix:
        os: ["ubuntu-latest"]
        python-version: [3.10]
    runs-on: ${{ matrix.os }}
    steps:
    # Checkout repo and setup python
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    # Install and configure poetry
    - name: Install Poetry
      uses: snok/install-poetry@v1.1.1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    # Load cached venv if cache exists
    - name: Load cached venv (poetry)
      id: cached-poetry-dependencies
      uses: actions/cache@v2
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
    # install dependencies if cache does not exist
    - name: Install dependencies
      run: poetry install
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
    # run: test suite
    - name: Test
      run: |
        source .venv/bin/activate
        pytest oligo_melting/tests/
